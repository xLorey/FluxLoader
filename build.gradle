plugins {
    id 'java'
}

group = 'io.xlorey'
version = '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-tree:9.2'

    implementation files('libs/zombie.jar')
    implementation files('libs/fmod.jar')
    implementation files('libs/se.jar')
    implementation files('libs/trove-3.0.3.jar')
    implementation files('libs/uncommons-maths-1.2.3.jar')

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

/**
 * Replacing data with current ones
 */
processResources {
    filesMatching('**/fluxloader.properties') {
        filter {
            it.replace('%PROJECT_VERSION%', version)
                    .replace('%PROJECT_NAME%', rootProject.name)
        }
    }
}

/**
 * Creating an executable JAR file
 */
jar {
    archiveFileName = "${rootProject.name}-${version}.jar"
    destinationDirectory = file('build')
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    manifest {
        attributes(
                'Main-Class': 'io.xlorey.FluxLoader.Main'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from("docs/javadoc") {
        into 'docs'
    }
}

/**
 * Generating JavaDoc for Jar archive
 */
tasks.register('generateJavaDoc', Javadoc) {
    source = sourceSets.main.java.srcDirs
    classpath = configurations.compileClasspath
    destinationDir = file("docs/javadoc")
}

/**
 * Building a Jar archive with documentation
 */
tasks.register('buildJar') {
    dependsOn generateJavaDoc
    finalizedBy jar
}